using InfoDroplets.ResultExporter.Models;
using InfoDroplets.ResultExporterApp;
using System;
using System.IO;
using System.Windows.Markup.Localizer;

namespace ResultExporterApp
{
    internal class MapGenerator
    {
        internal Dictionary<string, string> CustomFileValues { get; }
        internal LogProcessor logProcessor { get; private set; }
        internal string MapContent = "<!DOCTYPE html>\r\n<html xmlns=\"https://www.w3.org/1999/xhtml\">\r\n\t<head>\r\n\t\t<title>_RE_TITLE_</title>\r\n\t\t<base target=\"_top\"></base>\r\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n\t\t<meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\" />\r\n\t\t<meta name=\"geo.position\" content=\"_RE_CTR_LAT_; _RE_CTR_LNG_\" />\r\n\t\t<meta name=\"ICBM\" content=\"_RE_CTR_LAT_, _RE_CTR_LNG_\" />\r\n\t</head>\r\n\t<body style=\"margin:0px;\">\r\n\t\t\r\n\t\t<script type=\"text/javascript\">\r\n\t\t\tdocument.writeln('<link href=\"https://www.gpsvisualizer.com/leaflet/leaflet.css\" rel=\"stylesheet\" />');\r\n\t\t\tdocument.writeln('<script src=\"https://www.gpsvisualizer.com/leaflet/leaflet.js\" type=\"text/javascript\"><'+'/script>');\r\n\t\t</script>\r\n\t\t\r\n\t\t<div style=\"margin-left:0px; margin-right:0px; margin-top:0px; margin-bottom:0px;\">\r\n\t\t\t<div id=\"gmap_div\" style=\"width:100%; height:100%; margin:0px; margin-right:12px; background-color:#f0f0f0; float:left; overflow:hidden;\">\r\n\t\t\t\t<p style=\"text-align:center; font:10px Arial;\">Please wait while the map data loads...</p>\r\n\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t<div id=\"gv_infobox\" class=\"gv_infobox\" style=\"font:11px Arial; border:solid #666666 1px; background-color:#ffffff; padding:4px; overflow:auto; display:none; max-width:400px;\">\r\n\t\t\t\t<!-- Although GPS Visualizer didn't create an legend/info box with your map, you can use this space for something else if you'd like; enable it by setting gv_options.infobox_options.enabled to true -->\r\n\t\t\t\t<p style=\"text-align:center; font:10px Arial;\">Generated by Soprobotics - _RE_TITLE_</p>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div id=\"gv_tracklist\" class=\"gv_tracklist\" style=\"font:11px Arial; line-height:11px; background-color:#ffffff; overflow:auto; display:none;\"><!-- --></div>\r\n\t\t\t<div id=\"gv_clear_margins\" style=\"height:0px; clear:both;\"><!-- clear the \"float\" --></div>\r\n\t\t</div>\r\n\t\t\r\n\t\t<!-- begin GPS Visualizer setup script (must come after loading of API code) -->\r\n\t\t<script type=\"text/javascript\">\r\n\t\t\t/* Global variables used by the GPS Visualizer functions (20240929122113): */\r\n\t\t\tgv_options = {};\r\n\t\t\t\r\n\t\t\t// basic map parameters:\r\n            gv_options.center = [_RE_CTR_LAT_, _RE_CTR_LNG_];  // [latitude,longitude] - be sure to keep the square brackets\r\n\t\t\tgv_options.zoom = 11;  // higher number means closer view; can also be 'auto' for automatic zoom/center based on map elements\r\n\t\t\tgv_options.map_type = 'GV_OSM_RELIEF';  // popular map_type choices are 'GV_STREET', 'GV_SATELLITE', 'GV_HYBRID', 'GV_TERRAIN', 'GV_OSM', 'GV_TOPO_US', 'GV_TOPO_WORLD' (https://www.gpsvisualizer.com/misc/leaflet_map_types.html)\r\n\t\t\tgv_options.map_opacity = 1.00;  // number from 0 to 1\r\n\t\t\tgv_options.full_screen = true;  // true|false: should the map fill the entire page (or frame)?\r\n\t\t\tgv_options.width = 1920;  // width of the map, in pixels\r\n\t\t\tgv_options.height = 1080;  // height of the map, in pixels\r\n\t\t\t\r\n\t\t\tgv_options.map_div = 'gmap_div';  // the name of the HTML \"div\" tag containing the map itself; usually 'gmap_div'\r\n\t\t\tgv_options.doubleclick_zoom = true;  // true|false: zoom in when mouse is double-clicked?\r\n\t\t\tgv_options.doubleclick_center = false;  // true|false: re-center the map on the point that was double-clicked?\r\n\t\t\tgv_options.scroll_zoom = true; // true|false; or 'reverse' for down=in and up=out\r\n\t\t\tgv_options.page_scrolling = true; // true|false; does the map relenquish control of the scroll wheel when embedded in scrollable pages?\r\n\t\t\tgv_options.autozoom_adjustment = 0; gv_options.autozoom_default = 11;\r\n\t\t\tgv_options.centering_options = { 'open_info_window':true, 'partial_match':true, 'center_key':'center', 'default_zoom':null } // URL-based centering (e.g., ?center=name_of_marker&zoom=14)\r\n\t\t\tgv_options.animated_zoom = true; // true|false: only affects Leaflet maps\r\n\t\t\t\r\n\t\t\t// widgets on the map:\r\n\t\t\tgv_options.zoom_control = 'auto'; // 'auto'|'large'|'small'|'none'\r\n\t\t\tgv_options.recenter_button = true; // true|false: is there a 'click to recenter' button above the zoom control?\r\n\t\t\tgv_options.geolocation_control = false; // true|false; only works on secure servers\r\n\t\t\tgv_options.geolocation_options = { center:true, zoom:null, marker:true, info_window:true };\r\n\t\t\tgv_options.scale_control = true; // true|false\r\n\t\t\tgv_options.map_opacity_control = false;  // true|false\r\n\t\t\tgv_options.map_type_control = {};  // widget to change the background map\r\n\t\t\t  gv_options.map_type_control.visible = 'auto'; // true|false|'auto': is a map type control placed on the map itself?\r\n\t\t\t  gv_options.map_type_control.filter = true;  // true|false: when map loads, are irrelevant maps ignored?\r\n\t\t\t  gv_options.map_type_control.excluded = [];  // comma-separated list of quoted map IDs that will never show in the list ('included' also works)\r\n\t\t\tgv_options.center_coordinates = false;  // true|false: show a \"center coordinates\" box and crosshair?\r\n\t\t\tgv_options.measurement_tools = true; // true|false: put a measurement ruler on the map?\r\n\t\t\tgv_options.measurement_options = { visible:false, distance_color:'', area_color:'' };\r\n\t\t\tgv_options.crosshair_hidden = true;  // true|false: hide the crosshair initially?\r\n\t\t\tgv_options.mouse_coordinates = true;  // true|false: show a \"mouse coordinates\" box?\r\n\t\t\tgv_options.utilities_menu = { 'maptype':true, 'opacity':true, 'measure':true, 'geolocate':true, 'profile':true };\r\n\t\t\tgv_options.allow_export = true;  // true|false\r\n\t\t\t\r\n\t\t\tgv_options.infobox_options = {}; // options for a floating info box (id=\"gv_infobox\"), which can contain anything\r\n\t\t\t  gv_options.infobox_options.enabled = true;  // true|false: enable or disable the info box altogether\r\n\t\t\t  gv_options.infobox_options.position = ['LEFT_TOP',52,4];  // [Google anchor name, relative x, relative y]\r\n\t\t\t  gv_options.infobox_options.draggable = true;  // true|false: can it be moved around the screen?\r\n\t\t\t  gv_options.infobox_options.collapsible = true;  // true|false: can it be collapsed by double-clicking its top bar?\r\n\t\t\t\r\n\t\t\t// track-related options:\r\n\t\t\tgv_options.track_optimization = 1; // sets Leaflet's smoothFactor parameter\r\n\t\t\tgv_options.track_tooltips = false; // true|false: should the name of a track appear on the map when you mouse over the track itself?\r\n\t\t\tgv_options.tracklist_options = {}; // options for a floating list of the tracks visible on the map\r\n\t\t\t  gv_options.tracklist_options.enabled = true;  // true|false: enable or disable the tracklist altogether\r\n\t\t\t  gv_options.tracklist_options.position = ['RIGHT_TOP',4,32];  // [Google anchor name, relative x, relative y]\r\n\t\t\t  gv_options.tracklist_options.min_width = 100; // minimum width of the tracklist, in pixels\r\n\t\t\t  gv_options.tracklist_options.max_width = 180; // maximum width of the tracklist, in pixels\r\n\t\t\t  gv_options.tracklist_options.min_height = 0; // minimum height of the tracklist, in pixels; if the list is longer, scrollbars will appear\r\n\t\t\t  gv_options.tracklist_options.max_height = 135; // maximum height of the tracklist, in pixels; if the list is longer, scrollbars will appear\r\n\t\t\t  gv_options.tracklist_options.desc = true;  // true|false: should tracks' descriptions be shown in the list\r\n\t\t\t  gv_options.tracklist_options.toggle = false;  // true|false: should clicking on a track's name turn it on or off?\r\n\t\t\t  gv_options.tracklist_options.checkboxes = true;  // true|false: should there be a separate icon/checkbox for toggling visibility?\r\n\t\t\t  gv_options.tracklist_options.zoom_links = true;  // true|false: should each item include a small icon that will zoom to that track?\r\n\t\t\t  gv_options.tracklist_options.highlighting = true;  // true|false: should the track be highlighted when you mouse over the name in the list?\r\n\t\t\t  gv_options.tracklist_options.tooltips = false;  // true|false: should the name of the track appear on the map when you mouse over the name in the list?\r\n\t\t\t  gv_options.tracklist_options.draggable = true;  // true|false: can it be moved around the screen?\r\n\t\t\t  gv_options.tracklist_options.collapsible = true;  // true|false: can it be collapsed by double-clicking its top bar?\r\n\t\t\t  gv_options.tracklist_options.header = 'Tracks:'; // HTML code; be sure to put backslashes in front of any single quotes, and don't include any line breaks\r\n\t\t\t  gv_options.tracklist_options.footer = ''; // HTML code\r\n\t\t\tgv_options.profile_options = { visible:false, icon:true, units:'metric', filled:true, waypoints:false, height:120, width:'100%', y_min:null, y_max:_RE_YMAX_, gap_between_tracks:false, click_to_center: true }; // see https://www.gpsvisualizer.com/tutorials/profiles_in_maps.html\r\n\r\n\t\t\t// marker-related options:\r\n\t\t\tgv_options.default_marker = { color:'red',icon:'googlemini',scale:1 }; // icon can be a URL, but be sure to also include size:[w,h] and optionally anchor:[x,y]\r\n\t\t\tgv_options.vector_markers = true; // are the icons on the map in embedded SVG format?\r\n\t\t\tgv_options.marker_tooltips = true; // do the names of the markers show up when you mouse-over them?\r\n\t\t\tgv_options.marker_shadows = true; // true|false: do the standard markers have \"shadows\" behind them?\r\n\t\t\tgv_options.marker_link_target = '_blank'; // the name of the window or frame into which markers' URLs will load\r\n\t\t\tgv_options.info_window_width = 0;  // in pixels, the width of the markers' pop-up info \"bubbles\" (can be overridden by 'window_width' in individual markers)\r\n\t\t\tgv_options.thumbnail_width = 0;  // in pixels, the width of the markers' thumbnails (can be overridden by 'thumbnail_width' in individual markers)\r\n\t\t\tgv_options.photo_size = [0,0];  // in pixels, the size of the photos in info windows (can be overridden by 'photo_width' or 'photo_size' in individual markers)\r\n\t\t\tgv_options.hide_labels = false;  // true|false: hide labels when map first loads?\r\n\t\t\tgv_options.labels_behind_markers = false; // true|false: are the labels behind other markers (true) or in front of them (false)?\r\n\t\t\tgv_options.label_offset = [0,0];  // [x,y]: shift all markers' labels (positive numbers are right and down)\r\n\t\t\tgv_options.label_centered = false;  // true|false: center labels with respect to their markers?  (label_left is also a valid option.)\r\n\t\t\tgv_options.driving_directions = false;  // put a small \"driving directions\" form in each marker's pop-up window? (override with dd:true or dd:false in a marker's options)\r\n\t\t\tgv_options.garmin_icon_set = 'gpsmap'; // 'gpsmap' are the small 16x16 icons; change it to '24x24' for larger icons\r\n\t\t\t\t\r\n\t\t\t// Load GPS Visualizer's mapping functions (this must be loaded AFTER gv_options are set):\r\n\t\t\tvar script_file = (self.API && API.match(/^g/i)) ? 'google_maps/functions3.js' : 'leaflet/functions.js';\r\n\t\t\tdocument.writeln('<script src=\"https://www.gpsvisualizer.com/'+script_file+'\" type=\"text/javascript\"><'+'/script>');\r\n\t\t</script>\r\n\t\t\r\n\t\t<style type=\"text/css\">\r\n\t\t\t/* Put any custom style definitions here (e.g., .gv_marker_info_window, .gv_marker_info_window_name, .gv_marker_list_item, .gv_tooltip, .gv_label, etc.) */\r\n\t\t\t#gmap_div .gv_marker_info_window {\r\n\t\t\t\tfont-size:11px !important;\r\n\t\t\t}\r\n\t\t\t#gmap_div .gv_label {\r\n\t\t\t\topacity:0.90; filter:alpha(opacity=90);\r\n\t\t\t\tcolor:white; background:#333333; border:1px solid black; padding:1px;\r\n\t\t\t\tfont-family:Verdana !important; font-size:10px;\r\n\t\t\t\tfont-weight:normal !important;\r\n\t\t\t}\r\n\t\t\t.legend_block {\r\n\t\t\t\tdisplay:inline-block; border:solid 1px black; width:9px; height:9px; margin:0px 2px 0px 0px;\r\n\t\t\t}\t\t\t\r\n\t\t</style>\r\n\t\t\r\n\t\t<!-- end GPSV setup script and styles; begin map-drawing script (they must be separate) -->\r\n\t\t<script type=\"text/javascript\">\r\n\t\t\tfunction GV_Map() {\r\n\t\t\t\tGV_Setup_Map();\r\n\t\t\t\t\r\n\t\t\t\t// Track #1\r\n\t\t\t\tt = 1; trk[t] = {info:[],segments:[]};\r\n\t\t\t\ttrk[t].info.name = 'data'; trk[t].info.desc = ''; trk[t].info.clickable = true;\r\n\t\t\t\ttrk[t].info.color = '#e60000'; trk[t].info.width = 3; trk[t].info.opacity = 0.9; trk[t].info.hidden = false; trk[t].info.z_index = null;\r\n\t\t\t\ttrk[t].info.outline_color = 'black'; trk[t].info.outline_width = 0; trk[t].info.fill_color = '#e60000'; trk[t].info.fill_opacity = 0;\r\n\t\t\t\ttrk[t].info.elevation = true;\r\n_RE_LOGSEGMENT_\r\n\t\t\t\tGV_Draw_Track(t);\r\n\t\t\t\t\r\n\t\t\t\tt = 1; GV_Add_Track_to_Tracklist({ bullet: '- ', name: trk[t].info.name, desc: trk[t].info.desc, color: trk[t].info.color, number: t });\r\n\r\n                // Track #2\r\n                t = 2; trk[t] = { info: [], segments: [] };\r\n                trk[t].info.name = 'breaks'; trk[t].info.desc = ''; trk[t].info.clickable = true;\r\n                trk[t].info.color = '#7f7f7f'; trk[t].info.width = 3; trk[t].info.opacity = 0.7; trk[t].info.hidden = false; trk[t].info.z_index = null;\r\n                trk[t].info.outline_color = 'black'; trk[t].info.outline_width = 0; trk[t].info.fill_color = '#7f7f7f'; trk[t].info.fill_opacity = 0;\r\n                trk[t].info.elevation = true;\r\n_RE_BREAKSEGMENT_\r\n                GV_Draw_Track(t);\r\n\r\n                t = 2; GV_Add_Track_to_Tracklist({ bullet: '- ', name: trk[t].info.name, desc: trk[t].info.desc, color: trk[t].info.color, number: t });\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\tGV_Finish_Map();\t\t\r\n\t\t\t}\r\n\t\t\tGV_Map();\r\n\t\t\t// https://www.gpsvisualizer.com/map_input?form=leaflet\r\n\t\t</script>\r\n\t</body>\r\n\r\n</html>\r\n";
        public MapGenerator(LogProcessor logprocessor)
        {
            this.logProcessor = logprocessor;

            CustomFileValues = new Dictionary<string, string>
            {
                { "_RE_TITLE_", String.Empty },
                { "_RE_CTR_LNG_", String.Empty },
                { "_RE_CTR_LAT_", String.Empty },
                { "_RE_YMAX_", String.Empty }
            };
        }

        internal bool Execute(string outputFolder)
        {
            GlobalLabelHelper.Instance.LabelText = "Prepare environment....";
            var newFilePath = GetNewFilePath(outputFolder);
            PrepareOutputFolder(newFilePath);
            FillDictionary(logProcessor.DropletNumber, logProcessor.ElevationRange, logProcessor.CenterPos.Longitude, logProcessor.CenterPos.Latitude);

            GlobalLabelHelper.Instance.LabelText = "Generate file content....";
            var NewFileContent = CreateFileContent(logProcessor.LogCollection, logProcessor.BreakCollection);
            if (NewFileContent.Contains("_RE_"))
                throw new Exception("Map content creation failed");

            GlobalLabelHelper.Instance.LabelText = "Write content to file....";
            File.WriteAllText(newFilePath, NewFileContent);

            if(File.Exists(newFilePath))
            {
                GlobalLabelHelper.Instance.LabelText = "[Success] Map created";
                return true;
            }
            return false;
        }

        internal string GetNewFilePath(string outputFolder)
        {
            string newFileName = $"Flight analytics L{logProcessor.DropletNumber} - {DateTime.Today.ToString("dd.MM.yyyy.")}.html";
            return Path.Combine(outputFolder, newFileName);
        }

        bool PrepareOutputFolder(string newFilePath)
        {
            if (File.Exists(newFilePath))
            {
                File.Delete(newFilePath);
                Thread.Sleep(1000);
            }

            return !File.Exists(newFilePath);
        }

        bool FillDictionary(int deviceId, int yMax, double ctrLng, double ctrLat)
        {
            string title = $"L{deviceId}-{DateTime.Today.ToString("d")}";
            CustomFileValues["_RE_TITLE_"] = title;
            CustomFileValues["_RE_YMAX_"] = yMax.ToString();
            CustomFileValues["_RE_CTR_LNG_"] = ctrLng.ToString();
            CustomFileValues["_RE_CTR_LAT_"] = ctrLat.ToString();

            return true;
        }

        string CreateFileContent(List<List<LogEntry>> logEntries, List<List<LogEntry>> breakEntries)
        {
            var sampleMapPath = Directory.GetCurrentDirectory();
            for (int i = 0; i < 3; i++)
            {
                sampleMapPath = Directory.GetParent(sampleMapPath).FullName;
            }

            foreach (var item in CustomFileValues)
            {
                MapContent = MapContent.Replace(item.Key, item.Value);
            }

            string logSegmentKey = "_RE_LOGSEGMENT_";
            string breakSegmentKey = "_RE_BREAKSEGMENT_";

            string logSegmentsContent = GenerateSegments(logEntries);
            string breakSegmentsContent = GenerateSegments(breakEntries);

            MapContent = MapContent.Replace(logSegmentKey, logSegmentsContent);
            MapContent = MapContent.Replace(breakSegmentKey, breakSegmentsContent);
            return MapContent;
        }

        string GenerateSegments(List<List<LogEntry>> entries)
        {
            string output = "";
            foreach (var entryList in entries)
            {
                output += $"\t\t\t\t{GenerateTrackSegment(entryList)} \r\n";
            }
            output += "\r\n";
            return output;
        }

        string GenerateTrackSegment(List<LogEntry> entryList)
        {
            string output = "trk[t].segments.push({ points:[";
            foreach (var entry in entryList)
            {
                output += $"{entry.ToString()},";
            }
            output = output.TrimEnd(',');
            output += "]});";

            return output;
        }
    }
}

